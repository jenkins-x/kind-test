name: Create Cluster

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  create-cluster:
    runs-on: macos-latest
    steps:
      - name: Create Gitea
        run: |
          brew tap gitea/tap https://gitea.com/gitea/homebrew-gitea
          brew install gitea
          curl http://localhost:80 | true
          curl http://localhost:8080 | true

      - uses: docker-practice/actions-setup-docker@master
      - run: |
          set -x

          docker version
          
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: gitea
        run: |
          mkdir gitea
          cd gitea
          cat > docker-compose.yml <<EOF
          version: "3"

          networks:
            gitea:
              external: false

          services:
            server:
              image: gitea/gitea:1.14.4
              container_name: gitea
              environment:
                - USER_UID=1000
                - USER_GID=1000
              restart: always
              networks:
                - gitea
              volumes:
                - ./gitea:/data
                - /etc/timezone:/etc/timezone:ro
                - /etc/localtime:/etc/localtime:ro
              ports:
                - "3000:3000"
                - "222:22"
          EOF
          
          docker-compose up -d
          sleep 60
          docker-compose ps
          curl -v http://localhost:3000

#       - name: Public IP
#         id: ip
#         uses: haythem/public-ip@v1.2

#       - name: Print Public IP
#         run: |
#           echo ${{ steps.ip.outputs.ipv4 }}
#           echo ${{ steps.ip.outputs.ipv6 }}


#       - name: Create Kubernetes cluster
#         run: |
#           brew install kind
#           cat <<EOF | kind create cluster --wait 5m --config=-
#           kind: Cluster
#           apiVersion: kind.x-k8s.io/v1alpha4
#           nodes:
#           - role: control-plane
#             kubeadmConfigPatches:
#             - |
#               kind: InitConfiguration
#               nodeRegistration:
#                 kubeletExtraArgs:
#                   node-labels: "ingress-ready=true"
#             extraPortMappings:
#             - containerPort: 80
#               hostPort: 80
#               protocol: TCP
#             - containerPort: 443
#               hostPort: 443
#               protocol: TCP

#           EOF

#       - name: Create Kubernetes cluster
#         run: |
        
#           curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
#           chmod +x ./kind
#           echo $PATH
#           mkdir -p /home/runner/.local/bin
#           mv ./kind /home/runner/.local/bin/
#           cat <<EOF | kind create cluster --wait 5m --config=-
#           kind: Cluster
#           apiVersion: kind.x-k8s.io/v1alpha4
#           nodes:
#           - role: control-plane
#             kubeadmConfigPatches:
#             - |
#               kind: InitConfiguration
#               nodeRegistration:
#                 kubeletExtraArgs:
#                   node-labels: "ingress-ready=true"
#             extraPortMappings:
#             - containerPort: 80
#               hostPort: 80
#               protocol: TCP
#             - containerPort: 443
#               hostPort: 443
#               protocol: TCP

#           EOF


#       - name: Install
#         run: |
#           docker network inspect -f '{{.IPAM.Config}}' kind

#           VERSION=$(curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/stable.txt)
#           kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/${VERSION}/deploy/static/provider/kind/deploy.yaml  
          
#           kubectl wait --namespace ingress-nginx   --for=condition=ready pod   --selector=app.kubernetes.io/component=controller  --timeout=90s
          
          
#       - name: Curl
#         run: |
#           curl -v http://${{ steps.ip.outputs.ipv4 }}.nip.io
