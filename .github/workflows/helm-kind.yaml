name: Create Cluster

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  create-cluster:
    runs-on: ubuntu-latest
    steps:
#      - name: Create k8s Kind Cluster


      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Print Public IP
        run: |
          echo ${{ steps.ip.outputs.ipv4 }}
          echo ${{ steps.ip.outputs.ipv6 }}
          
      - name: Configure
        run: |
        
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
          chmod +x ./kind
          echo $PATH
          mkdir -p /home/runner/.local/bin
          mv ./kind /home/runner/.local/bin/
          cat <<EOF | kind create cluster --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          networking:
            # WARNING: It is _strongly_ recommended that you keep this the default
            # (127.0.0.1) for security reasons. However it is possible to change this.
            apiServerAddress: "${{ steps.ip.outputs.ipv6 }}"
            # By default the API server listens on a random open port.
            # You may choose a specific port but probably don't need to in most cases.
            # Using a random port makes it easier to spin up multiple clusters.
            # apiServerPort: 6443
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP

          EOF
      - name: Testing
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
          cat ~/.kube/config | true



      - name: Install
        run: |
          docker network inspect -f '{{.IPAM.Config}}' kind
          kubectl get nodes

          VERSION=$(curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/stable.txt)
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/${VERSION}/deploy/static/provider/kind/deploy.yaml
          kubectl get ns
          sleep 60
          kubectl get pods --namespace ingress-nginx   
          kubectl describe pods --namespace ingress-nginx   
          kubectl wait --namespace ingress-nginx   --for=condition=ready pod   --selector=app.kubernetes.io/component=controller  --timeout=190s
          
          
#          helm repo add nginx-stable https://helm.nginx.com/stable
#          helm repo update
#          helm install my-release nginx-stable/nginx-ingress  --set controller.service.externalIPs="{${{ steps.ip.outputs.ipv4 }}}"

      - name: Curl
        run: |
          curl http://${{ steps.ip.outputs.ipv4 }}.nip.io
